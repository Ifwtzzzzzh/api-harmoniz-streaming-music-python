[
    {
        "label": "Header",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Header",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base",
        "description": "models.base",
        "isExtraImport": true,
        "detail": "models.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base",
        "description": "models.base",
        "isExtraImport": true,
        "detail": "models.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base",
        "description": "models.base",
        "isExtraImport": true,
        "detail": "models.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base",
        "description": "models.base",
        "isExtraImport": true,
        "detail": "models.base",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TEXT",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TEXT",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "VARCHAR",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TEXT",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "VARCHAR",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "LargeBinary",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bcrypt",
        "description": "bcrypt",
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "importPath": "pydantic_schemas.user_create",
        "description": "pydantic_schemas.user_create",
        "isExtraImport": true,
        "detail": "pydantic_schemas.user_create",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "importPath": "pydantic_schemas.user_login",
        "description": "pydantic_schemas.user_login",
        "isExtraImport": true,
        "detail": "pydantic_schemas.user_login",
        "documentation": {}
    },
    {
        "label": "auth_middleware",
        "importPath": "middleware.auth_middleware",
        "description": "middleware.auth_middleware",
        "isExtraImport": true,
        "detail": "middleware.auth_middleware",
        "documentation": {}
    },
    {
        "label": "auth_middleware",
        "importPath": "middleware.auth_middleware",
        "description": "middleware.auth_middleware",
        "isExtraImport": true,
        "detail": "middleware.auth_middleware",
        "documentation": {}
    },
    {
        "label": "Song",
        "importPath": "models.song",
        "description": "models.song",
        "isExtraImport": true,
        "detail": "models.song",
        "documentation": {}
    },
    {
        "label": "cloudinary",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cloudinary",
        "description": "cloudinary",
        "detail": "cloudinary",
        "documentation": {}
    },
    {
        "label": "cloudinary.uploader",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cloudinary.uploader",
        "description": "cloudinary.uploader",
        "detail": "cloudinary.uploader",
        "documentation": {}
    },
    {
        "label": "FavoriteSong",
        "importPath": "pydantic_schemas.favorite_song",
        "description": "pydantic_schemas.favorite_song",
        "isExtraImport": true,
        "detail": "pydantic_schemas.favorite_song",
        "documentation": {}
    },
    {
        "label": "Favorite",
        "importPath": "models.favorite",
        "description": "models.favorite",
        "isExtraImport": true,
        "detail": "models.favorite",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "routes",
        "description": "routes",
        "isExtraImport": true,
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "song",
        "importPath": "routes",
        "description": "routes",
        "isExtraImport": true,
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "auth_middleware",
        "kind": 2,
        "importPath": "middleware.auth_middleware",
        "description": "middleware.auth_middleware",
        "peekOfCode": "def auth_middleware(x_auth_token = Header()):\n    try:\n        if not x_auth_token:\n            raise HTTPException(401, 'No auth token, access denied!')\n        verified_token = jwt.decode(x_auth_token, 'password_key', ['HS256'])\n        if not verified_token:\n            raise HTTPException(401, 'Token verification failed, authorization denied!')\n        uid = verified_token.get('id')\n        return {'uid': uid, 'token': x_auth_token}\n    except jwt.PyJWTError as e:",
        "detail": "middleware.auth_middleware",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "models.base",
        "description": "models.base",
        "peekOfCode": "Base = declarative_base()",
        "detail": "models.base",
        "documentation": {}
    },
    {
        "label": "Favorite",
        "kind": 6,
        "importPath": "models.favorite",
        "description": "models.favorite",
        "peekOfCode": "class Favorite(Base):\n    __tablename__ = \"favorites\"\n    id = Column(TEXT, primary_key = True)\n    song_id = Column(TEXT, ForeignKey(\"songs.id\"))\n    user_id = Column(TEXT, ForeignKey(\"users.id\"))\n    song = relationship('Song')",
        "detail": "models.favorite",
        "documentation": {}
    },
    {
        "label": "Song",
        "kind": 6,
        "importPath": "models.song",
        "description": "models.song",
        "peekOfCode": "class Song(Base):\n    __tablename__ = 'songs'\n    id = Column(TEXT, primary_key = True)\n    song_url = Column(TEXT)\n    thumbnail_url = Column(TEXT)\n    artist = Column(TEXT)\n    song_name = Column(VARCHAR(100))\n    hex_code = Column(VARCHAR(6))",
        "detail": "models.song",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "models.user",
        "description": "models.user",
        "peekOfCode": "class User(Base):\n    __tablename__ = 'users'\n    id = Column(TEXT, primary_key = True)\n    name = Column(VARCHAR(100))\n    email = Column(VARCHAR(100))\n    password = Column(LargeBinary)",
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "FavoriteSong",
        "kind": 6,
        "importPath": "pydantic_schemas.favorite_song",
        "description": "pydantic_schemas.favorite_song",
        "peekOfCode": "class FavoriteSong(BaseModel):\n    song_id: str",
        "detail": "pydantic_schemas.favorite_song",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "pydantic_schemas.user_create",
        "description": "pydantic_schemas.user_create",
        "peekOfCode": "class UserCreate(BaseModel):\n    name: str\n    email: str\n    password: str",
        "detail": "pydantic_schemas.user_create",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "kind": 6,
        "importPath": "pydantic_schemas.user_login",
        "description": "pydantic_schemas.user_login",
        "peekOfCode": "class UserLogin(BaseModel):\n    email: str\n    password: str",
        "detail": "pydantic_schemas.user_login",
        "documentation": {}
    },
    {
        "label": "signup_user",
        "kind": 2,
        "importPath": "routes.auth",
        "description": "routes.auth",
        "peekOfCode": "def signup_user(user: UserCreate, db: Session = Depends(get_db)):\n    user_db = db.query(User).filter(User.email == user.email).first() \n    if user_db:\n        raise HTTPException(400, 'User with the same email already exist!')\n    hashed_pw = bcrypt.hashpw(user.password.encode(), bcrypt.gensalt()) # type: ignore\n    user_db = User(id = str(uuid.uuid4()), email = user.email, password = hashed_pw, name = user.name)\n    db.add(user_db) \n    db.commit() \n    db.refresh(user_db) \n    return user_db",
        "detail": "routes.auth",
        "documentation": {}
    },
    {
        "label": "login_user",
        "kind": 2,
        "importPath": "routes.auth",
        "description": "routes.auth",
        "peekOfCode": "def login_user(user: UserLogin, db: Session = Depends(get_db)):\n    user_db = db.query(User).filter(User.email == user.email).first()\n    if not user_db: \n        raise HTTPException(400, 'User with this email doesn\\'t exist')\n    is_match = bcrypt.checkpw(user.password.encode(), user_db.password)\n    if not is_match:\n        raise HTTPException(400, 'Incorrect password!')\n    token = jwt.encode({'id': user_db.id}, 'password_key')\n    return {'token': token, 'user': user_db}\n@router.get('/')",
        "detail": "routes.auth",
        "documentation": {}
    },
    {
        "label": "current_user_data",
        "kind": 2,
        "importPath": "routes.auth",
        "description": "routes.auth",
        "peekOfCode": "def current_user_data(db: Session = Depends(get_db), user_dict = Depends(auth_middleware)):\n    user = db.query(User).filter(User.id == user_dict['uid']).first()\n    if not user:\n        raise HTTPException(404, 'User not found!')\n    return user",
        "detail": "routes.auth",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routes.auth",
        "description": "routes.auth",
        "peekOfCode": "router = APIRouter()\n@router.post('/signup', status_code = 201)\ndef signup_user(user: UserCreate, db: Session = Depends(get_db)):\n    user_db = db.query(User).filter(User.email == user.email).first() \n    if user_db:\n        raise HTTPException(400, 'User with the same email already exist!')\n    hashed_pw = bcrypt.hashpw(user.password.encode(), bcrypt.gensalt()) # type: ignore\n    user_db = User(id = str(uuid.uuid4()), email = user.email, password = hashed_pw, name = user.name)\n    db.add(user_db) \n    db.commit() ",
        "detail": "routes.auth",
        "documentation": {}
    },
    {
        "label": "upload_song",
        "kind": 2,
        "importPath": "routes.song",
        "description": "routes.song",
        "peekOfCode": "def upload_song(song: UploadFile = File(...), \n                thumbnail: UploadFile = File(...), \n                artist: str = Form(...), \n                song_name: str = Form(...), \n                hex_code: str = Form(...),\n                db: Session = Depends(get_db),\n                auth_dict = Depends(auth_middleware)):\n    song_id = str(uuid.uuid4())\n    song_res = cloudinary.uploader.upload(song.file, resource_type = 'auto', folder = f'songs/{song_id}')\n    thumbnail_res = cloudinary.uploader.upload(thumbnail.file, resource_type = 'image', folder = f'songs/{song_id}')",
        "detail": "routes.song",
        "documentation": {}
    },
    {
        "label": "list_songs",
        "kind": 2,
        "importPath": "routes.song",
        "description": "routes.song",
        "peekOfCode": "def list_songs(db: Session = Depends(get_db), auth_details = Depends(auth_middleware)):\n    songs = db.query(Song).all()\n    return songs\n@router.post('/favorite')\ndef favorite_song(song:FavoriteSong, db: Session=Depends(get_db), auth_details = Depends(auth_middleware)):\n    user_id = auth_details['uid']\n    fav_song = db.query(Favorite).filter(Favorite.song_id == song.song_id, Favorite.user_id == user_id).first()\n    if fav_song:\n        db.delete(fav_song)\n        db.commit()",
        "detail": "routes.song",
        "documentation": {}
    },
    {
        "label": "favorite_song",
        "kind": 2,
        "importPath": "routes.song",
        "description": "routes.song",
        "peekOfCode": "def favorite_song(song:FavoriteSong, db: Session=Depends(get_db), auth_details = Depends(auth_middleware)):\n    user_id = auth_details['uid']\n    fav_song = db.query(Favorite).filter(Favorite.song_id == song.song_id, Favorite.user_id == user_id).first()\n    if fav_song:\n        db.delete(fav_song)\n        db.commit()\n        return {'message': False}\n    else:\n        new_fav = Favorite(id=str(uuid.uuid4()), song_id=song.song_id, user_id=user_id)\n        db.add(new_fav)",
        "detail": "routes.song",
        "documentation": {}
    },
    {
        "label": "list_fav_songs",
        "kind": 2,
        "importPath": "routes.song",
        "description": "routes.song",
        "peekOfCode": "def list_fav_songs(db: Session = Depends(get_db), auth_details = Depends(auth_middleware)):\n    user_id = auth_details['uid']\n    fav_songs = db.query(Favorite).filter(Favorite.user_id == user_id).options(joinedload(Favorite.song)).all()\n    return fav_songs",
        "detail": "routes.song",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routes.song",
        "description": "routes.song",
        "peekOfCode": "router = APIRouter()\ncloudinary.config( \n    cloud_name = \"dgk7spjs5\", \n    api_key = \"263483452198988\", \n    api_secret = \"SKFrma36I_J5_Z0TWthOTk1K1Ew\",\n    secure=True\n)\n@router.post('/upload', status_code = 201)\ndef upload_song(song: UploadFile = File(...), \n                thumbnail: UploadFile = File(...), ",
        "detail": "routes.song",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "DATABASE_URL = 'postgresql://postgres:test123@localhost:5432/harmoniz-streaming-music'\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit = False, autoflush = False, bind = engine)\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "engine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit = False, autoflush = False, bind = engine)\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit = False, autoflush = False, bind = engine)\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\napp.include_router(auth.router, prefix = '/auth')\napp.include_router(song.router, prefix = '/song')\nBase.metadata.create_all(engine)",
        "detail": "main",
        "documentation": {}
    }
]